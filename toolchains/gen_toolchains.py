#!/usr/bin/env python3
import sys, os, textwrap
from pathlib import Path
import tomllib

filepath = Path(__file__).parent.absolute()

def sh_join(xs): return " ".join(xs)

def main():
    cfg_path = filepath / "wali.toml"
    if not cfg_path.exists():
        print("wali.toml not found in current directory.", file=sys.stderr)
        sys.exit(1)

    with cfg_path.open("rb") as f:
        cfg = tomllib.load(f)

    target = cfg["target"]["triple"]

    paths  = cfg["build_dirs"]
    build_dir = paths["root"]
    llvm_dir  = paths["llvm"]
    sysroot   = paths["sysroot"]
    libcxx    = paths["libcxx"]

    # Compiler binaries
    cc      = "clang"
    cxx     = "clang++"
    ld      = "wasm-ld"
    ar      = "llvm-ar"
    ranlib  = "llvm-ranlib"
    llvm_config = "llvm-config"

    # Flags 
    flags = cfg["flags"]
    warning_cflags = [f"-W{x}" for x in flags.get("warning_cflags", [])]
    wasm_features = flags.get("wasm_features", [])
    extra_cflags = flags.get("extra_cflags", [])
    extra_cxx_flags = flags.get("extra_cxxflags", [])

    # Linker
    ldflags = []
    for key, val in flags.get("link", {}).items():
        if isinstance(val, bool):
            ldflags += [f"-Wl,--{key}"] if val is True else []
        elif isinstance(val, list):
            ldflags += [f"-Wl,--{key}={x}" for x in val]
        else:
            ldflags += [f"-Wl,--{key}={val}"]

    # ${SYSROOTVAR, LIBCXXVAR, and CFLAGSVAR are formatted according to the file
    common_cflags = sh_join(["--target="+target, "--sysroot={SYSROOTVAR}"] + extra_cflags + warning_cflags + wasm_features)
    common_cxxflags = sh_join(["-stdlib=libc++", "{CFLAGSVAR}", "-I{LIBCXXVAR}/include/c++/v1"])
    common_ldflags = sh_join(["-L{SYSROOTVAR}/lib", "-L{LIBCXXVAR}/lib"] + ldflags)

    root_dir_rel = ".."
    # -------------------
    # Generate Makefile
    # -------------------
    makefile = textwrap.dedent(f"""\
        # Auto-generated by gen_configs.py — Include this file in other makefiles
        mkfile_path := $(abspath $(lastword $(MAKEFILE_LIST)))

        WALI_ROOT_DIR  := $(patsubst %/,%, $(dir $(mkfile_path)))/{root_dir_rel}
        WALI_BUILD_DIR := $(WALI_ROOT_DIR)/{build_dir}

        # ---- Build Artifact Directories ---- #
        WALI_LLVM_DIR    := $(WALI_BUILD_DIR)/{llvm_dir}
        WALI_SYSROOT_DIR := $(WALI_BUILD_DIR)/{sysroot}
        WALI_LIBCXX_DIR  := $(WALI_BUILD_DIR)/{libcxx}

        # ---- Compiler/Linker Toolchain Binaries ---- #
        WALI_LLVM_BIN_DIR := $(WALI_LLVM_DIR)/bin
        WALI_CC     := $(WALI_LLVM_BIN_DIR)/{cc}
        WALI_CXX    := $(WALI_LLVM_BIN_DIR)/{cxx}
        WALI_LD     := $(WALI_LLVM_BIN_DIR)/{ld}
        WALI_AR     := $(WALI_LLVM_BIN_DIR)/{ar}
        WALI_RANLIB := $(WALI_LLVM_BIN_DIR)/{ranlib}

        WALI_COMMON_CFLAGS   := {common_cflags.format(SYSROOTVAR='$(WALI_SYSROOT_DIR)')}
        WALI_COMMON_CXXFLAGS := {common_cxxflags.format(CFLAGSVAR='$(WALI_COMMON_CFLAGS)', LIBCXXVAR='$(WALI_LIBCXX_DIR)')}
        WALI_COMMON_LDFLAGS  := {common_ldflags.format(SYSROOTVAR='$(WALI_SYSROOT_DIR)', LIBCXXVAR='$(WALI_LIBCXX_DIR)')}

        # --- Libclang RT --- #
        WALI_LLVM_MAJOR_VERSION = $(shell $(WALI_LLVM_BIN_DIR)/{llvm_config} --version | cut -d '.' -f 1)
        WALI_LIBCLANG_RT_LIB = $(WALI_LLVM_DIR)/lib/clang/$(WALI_LLVM_MAJOR_VERSION)/lib/{target}/libclang_rt.builtins.a

        .PHONY: print-vars
        print-vars:
        \t@echo WALI_ROOT_DIR=$(WALI_ROOT_DIR)
        \t@echo WALI_CC=$(WALI_CC)
        \t@echo WALI_CFLAGS=$(WALI_COMMON_CFLAGS)
        \t@echo WALI_CXXFLAGS=$(WALI_COMMON_CXXFLAGS)
        \t@echo WALI_LDFLAGS=$(WALI_COMMON_LDFLAGS)
    """)

    # -------------------
    # Generate Bash env
    # -------------------
    bash = textwrap.dedent(f"""\
        #!/usr/bin/env bash
        # Auto-generated by gen_configs.py — source this file
        set -euo pipefail

        export WALI_ROOT_DIR=$(dirname $(realpath ${{BASH_SOURCE}}))/{root_dir_rel}
        export WALI_BUILD_DIR=$WALI_ROOT_DIR/{build_dir}

        # Build Artifact Directories
        export WALI_LLVM_DIR=$WALI_BUILD_DIR/{llvm_dir}
        export WALI_SYSROOT_DIR=$WALI_BUILD_DIR/{sysroot}
        export WALI_LIBCXX_DIR=$WALI_BUILD_DIR/{libcxx}

        # LLVM Tools
        export WALI_LLVM_BIN_DIR=$WALI_LLVM_DIR/bin
        export WALI_CC=$WALI_LLVM_BIN_DIR/{cc}
        export WALI_CXX=$WALI_LLVM_BIN_DIR/{cxx}
        export WALI_LD=$WALI_LLVM_BIN_DIR/{ld}
        export WALI_AR=$WALI_LLVM_BIN_DIR/{ar}
        export WALI_RANLIB=$WALI_LLVM_BIN_DIR/{ranlib}

        # Compile/Link Flags
        export WALI_COMMON_CFLAGS="{common_cflags.format(SYSROOTVAR='${WALI_SYSROOT_DIR}')}"
        export WALI_COMMON_CXXFLAGS="{common_cxxflags.format(CFLAGSVAR='${WALI_COMMON_CFLAGS}', LIBCXXVAR='${WALI_LIBCXX_DIR}')}"
        export WALI_COMMON_LDFLAGS="{common_ldflags.format(SYSROOTVAR='${WALI_SYSROOT_DIR}', LIBCXXVAR='${WALI_LIBCXX_DIR}')}"

        # Libclang RT
        export WALI_LLVM_MAJOR_VERSION=$($WALI_LLVM_BIN_DIR/{llvm_config} --version | cut -d '.' -f 1)
        export WALI_LIBCLANG_RT_LIB=$WALI_LLVM_DIR/lib/clang/$WALI_LLVM_MAJOR_VERSION/lib/{target}/libclang_rt.builtins.a
    """)

    # -------------------
    # Generate CMake toolchain
    # -------------------
    cmake = textwrap.dedent(f"""\
        # Auto-generated by gen_configs.py — use with -DCMAKE_TOOLCHAIN_FILE=wali.cmake
        set (CMAKE_SYSTEM_NAME Linux)

        # Resolve project root relative to this file
        get_filename_component(WALI_ROOT_DIR "${{CMAKE_CURRENT_LIST_DIR}}" ABSOLUTE)
        set (WALI_BUILD_DIR  ${{WALI_ROOT_DIR}}/{build_dir})
        set (WALI_LLVM_BIN_DIR ${{WALI_BUILD_DIR}}/{llvm_dir}/bin)
        set (WALI_LIBCXX_DIR ${{WALI_BUILD_DIR}}/{libcxx})

        # Sysroot
        set (CMAKE_SYSROOT ${{WALI_BUILD_DIR}}/{sysroot})

        # Compiler Toolchain
        set (CMAKE_C_COMPILER   ${{WALI_LLVM_BIN_DIR}}/{cc})
        set (CMAKE_CXX_COMPILER ${{WALI_LLVM_BIN_DIR}}/{cxx})
        set (CMAKE_AR           ${{WALI_LLVM_BIN_DIR}}/{ar})
        set (CMAKE_RANLIB       ${{WALI_LLVM_BIN_DIR}}/{ranlib})
        set (CMAKE_LINKER       ${{WALI_LLVM_BIN_DIR}}/{ld})

        # Flags
        set (CMAKE_C_FLAGS "{common_cflags.format(SYSROOTVAR='${CMAKE_SYSROOT}')}")
        set (CMAKE_CXX_FLAGS "{common_cxxflags.format(CFLAGSVAR='${CMAKE_C_FLAGS}', LIBCXXVAR='${WALI_LIBCXX_DIR}')}")
        set (CMAKE_EXE_LINKER_FLAGS "{common_ldflags.format(SYSROOTVAR='${CMAKE_SYSROOT}', LIBCXXVAR='${WALI_LIBCXX_DIR}')}")
    """)

    # Write files
    (filepath / "wali.mk").write_text(makefile)
    (filepath / "wali.sh").write_text(bash)
    (filepath / "wali.cmake").write_text(cmake)
    os.chmod(filepath / "wali.sh", 0o755)

    print(f"Generated toolchains: {filepath}/wali.{{mk,sh,cmake}}")

if __name__ == "__main__":
    main()

